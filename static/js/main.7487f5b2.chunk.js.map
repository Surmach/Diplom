{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["createContext","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","SignInScreen","state","isSignedIn","uiConfig","signInFlow","signInOptions","PhoneAuthProvider","PROVIDER_ID","EmailAuthProvider","callbacks","signInSuccess","this","unregisterAuthObserver","onAuthStateChanged","user","setState","className","currentUser","displayName","id","src","photoURL","onClick","signOut","firebaseAuth","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAS6BA,0BACFA,0BAc3BC,gBAZuB,CACrBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iB,IA6DFC,E,2MApDbC,MAAQ,CACNC,YAAY,G,EAIdC,SAAW,CAETC,WAAY,QAEZC,cAAe,CACbd,OAAce,kBAAkBC,YAC/BhB,OAAciB,kBAAkBD,aAEnCE,UAAW,CAETC,cAAe,kBAAM,K,mFAKJ,IAAD,OAClBC,KAAKC,uBAAyBrB,SAAgBsB,oBAC1C,SAACC,GAAD,OAAU,EAAKC,SAAS,CAACb,aAAcY,S,6CAK3CH,KAAKC,2B,+BAIL,OAAKD,KAAKV,MAAMC,WAWd,yBAAKc,UAAU,aACb,waACA,8DAAWzB,SAAgB0B,YAAYC,YAAvC,mJACE,yBAAKC,GAAG,QAAQH,UAAU,MAAMI,IAAK7B,SAAgB0B,YAAYI,WACnE,kBAAC,IAAD,CAAQC,QAAS,kBAAM/B,SAAgBgC,YAAvC,mCAbA,yBAAKP,UAAU,aACb,waAEA,+GACA,kBAAC,IAAD,CAAoBb,SAAUQ,KAAKR,SAAUqB,aAAcjC,gB,GAxC1CkC,aCdPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7487f5b2.chunk.js","sourcesContent":["import React, {Component,createContext } from 'react';\nimport * as firebase from \"firebase/app\";\nimport * as firebaseui from 'firebaseui'\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport './App.css'; // This uses CSS modules.\nimport { Button } from 'antd';\n\nexport const NomberContext = createContext() \nexport const CodeContext = createContext()\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAT6FCsFT9qM4D66mBFEFd-8wDzr6Bdz7s\",\n  authDomain: \"phoneauth-6cbfd.firebaseapp.com\",\n  databaseURL: \"https://phoneauth-6cbfd.firebaseio.com\",\n  projectId: \"phoneauth-6cbfd\",\n  storageBucket: \"phoneauth-6cbfd.appspot.com\",\n  messagingSenderId: \"177447056089\",\n  appId: \"1:177447056089:web:eafecfdd1c8086f95944c8\",\n  measurementId: \"G-JNLR56BR24\"\n};\n// Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\n\nclass SignInScreen extends Component {\n\n  \n  state = {\n    isSignedIn: false \n  };\n\n  \n  uiConfig = {\n    \n    signInFlow: 'popup',\n    \n    signInOptions: [\n      firebase.auth.PhoneAuthProvider.PROVIDER_ID,\n       firebase.auth.EmailAuthProvider.PROVIDER_ID,\n    ],\n    callbacks: {\n      \n      signInSuccess: () => false\n    }\n  };\n\n  \n  componentDidMount() {\n    this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(\n        (user) => this.setState({isSignedIn: !!user})\n    );\n  }\n  \n  componentWillUnmount() {\n    this.unregisterAuthObserver();\n  }\n\n  render() {\n    if (!this.state.isSignedIn) {\n      return (\n        <div className=\"container\">\n          <h1>Програмний модуль авторизації та автенфікаціі веб-сайтів підрозділів ЗСУ</h1>\n\n          <h2>Авторизуйтесь:</h2>\n          <StyledFirebaseAuth uiConfig={this.uiConfig} firebaseAuth={firebase.auth()}/>\n        </div>\n      );\n    }\n    return (\n      <div className=\"container\">\n        <h1>Програмний модуль авторизації та автенфікаціі веб-сайтів підрозділів ЗСУ</h1>\n        <h2>Вітаю {firebase.auth().currentUser.displayName}! Ви успішно авторизувались!</h2>\n          <img id=\"photo\" className=\"pic\" src={firebase.auth().currentUser.photoURL}/>\n        <Button onClick={() => firebase.auth().signOut()}>Вийти</Button>\n      </div>\n    );\n  }\n}\n\nexport default SignInScreen;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}